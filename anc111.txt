/****************************************************************************/
/*                     Project name: Feedforward 1x1x1 ANC                  */
/*                                                                          */
/*                        File name: main.c                                 */
/*                             date: 2019/05/17                             */
/*                                                                          */
/*(c)Copyright 2002-2012 HIRATSUKA Engineering Co.,Ltd. All rights reserved.*/
/****************************************************************************/
/*
Board setting   DSK6713IF-A (HEG Board)
   DIPSW   S1,  1:OFF  2:OFF  3:OFF  4:OFF  5:OFF  6:OFF (No use)
   DIPSW   S2,  1:OFF  2:OFF  3:OFF  4:OFF  5:OFF  6:OFF (No use)
*/

#define CHIP_6713 1

#define gain 0.2			// White noise gain

#define Fs 4000				// Sampling frequency for counting offline modeling time
#define Otime 20				// Offline modeling time in second

//#define FILE_NAME "secpath.h"		// file name of s model

//#define FILE_NAME "secpath.h"
#define seclength 64
#define wlength 128
//#define beta1 0.05
//#define beta2 0.01

float offline_input[seclength];
float online_input[wlength];
float s[seclength];
float w[wlength];
float x_buffer[wlength];
float x_hat[wlength];

float y_out1;
float y_out2[wlength];
//float y_out2;
float error1 = 0;
float error2[wlength];
//float error2 = 0;
float e1_min;
float beta1 = 0.05;
float beta2 = 0.01;

#include <stdio.h>
#include <csl_chiphal.h>
#include <csl_irq.h>
#include <csl_emif.h>
#include <dsk6713.h>
#include "dsk6713if.h"

void DSKIFCHECK(void);
void emif_init(void);

Int32 ad_data[8];
Int32 da_data[4];

/******User defined variable******/
int i=0;					// counter for iteration
int counter= 0;				// counter for offline modeling time
float st = 0;

// Random noise generator function
static long n = (long)12357;        					// Seed x(0) = 12357
float uran(){
    float ran;                          				// Random noise r(n)
    n = (long)2045 * n + 1L;            				// x(n)=2045*x(n-1)+1
    n = n- (long)((float)n * 9.5367E-07) * 1048576L;    // x(n)=x(n)-INT[x(n)/1048576]*1048576
    ran = (float)(n + 1L) * (float)9.5367E-07;  		// r(n)=FLOAT[x(n)+1]/1048577
    ran = ran * 2 - 1;
    return (ran);
}

void offline (void);
void online (void);
void main(void){
	//FILE *fp1;
	/***** variable initialization*****/
	for (i = seclength-1; i >= 0; --i){
		offline_input[i] = 0;
		s[i] = 0;
	    }
	for (i = wlength-1; i >= 0; --i){
		online_input[i] = 0;
		w[i] = 0;
		y_out2[i] = 0;
		error2[i] = 0;
		x_hat[i] = 0;
		}

	DSK6713_init();						// Initialize all board APIs(for TI C6713DSK)

	emif_init();						// Bus Timing Setting(for HEG DSK6713IF-A use)

	DSKIFCHECK();

	/*------------------------------------------------------------------------------------
	Sampling clock:
	01:1k  02:1.2k  03:1.5k   04:2k    05:2.5k   06:3k   07:4k  08:5k
	09:6k  0A:8k    0B:10k    0C:12k   0D:12.5k  0E:15k  0F:16k
	------------------------------------------------------------------------------------*/
	*(volatile Int32 *)DSKIF_SETREG1 = 0x00004007;  // Sampling clock set (2.5kHz)
	*(volatile Int32 *)DSKIF_SETREG2 = 0x00000011;  // Interrupt set


	IRQ_map(IRQ_EVT_EXTINT4, 4);		// IRQ_EVT_EXTINT4 is allocated in INT4.
	IRQ_enable(IRQ_EVT_EXTINT4);		// EXT_INT4 Inttrupt Enable

	IRQ_nmiEnable();					// enable NMI(Non Maskable Interrupt)
	IRQ_globalEnable();					// set GIE(Global Interrupt Enable)

	for(;;){}
}

interrupt void int4(void)
{
//	FILE *fp1;
	// Define input
	ad_data[0] = *(volatile Int32 *)DSKIF_AD0;      // Ref. mic. input
	ad_data[1] = *(volatile Int32 *)DSKIF_AD1;      // Error mic. input
	ad_data[2] = *(volatile Int32 *)DSKIF_AD2;      // Switch

	/*Signal processing*/
	if (counter < Fs*Otime)
	{
		offline();// call offline modeling routine
	}
	else if (counter == Fs * Otime)
		{
			printf("Finish modeling!\n");
			printf("Start ANC\n");
			counter++;
		}
	if (counter > Fs*Otime)
		{
			online();// call offline modeling routine
		}
}

void online (void)
{
			/************** Single FF ANC **************/
                // DSP input
		        online_input[0] = (float)ad_data[0] * (float)3.0518E-05;
				error2[0] = (float)ad_data[1] * (float)3.0518E-05;
				// Adaptive output filtering
//				online_input[0] = online_input[0] - x_hat[0];
				y_out2[0] = 0.0;
				for( i = wlength; i >= 0; --i){
				y_out2[0] += w[i] * online_input[i]; //y_out2?
				}
				/* Define DSP output */
				da_data[0] = (Int32)(y_out2[0] * (float)32768); 		// Antinoise To loudspeaker
				da_data[1] = (Int32)(error2[0] * (float)32768);           //  check error2
				/* Send signal out */
				*(volatile Int32 *)DSKIF_DA0 = da_data[0];
				*(volatile Int32 *)DSKIF_DA1 = da_data[1];
				/* Trigger DAC */
				*(volatile Int32 *)DSKIF_DASETFLG = 0;	/* Clear DA conversion start bit */
				*(volatile Int32 *)DSKIF_DASETFLG = 1;	/* Set DA conversion start bit */
				// input pass S^(z)
				x_hat[0] = 0.0;
				for(i = seclength-1; i >=0 ; --i ){
				x_hat[0] += s[i] * online_input[i];
				}
				// Weight updating
				for (i = wlength-1; i > 0; --i ){
				w[i] = w[i] - beta2 * error2[0] * x_hat[i];
				}
				// Signal buffering
				for(i = wlength-1; i > 0; --i){
				online_input[i] = online_input[i-1];
				y_out2[i] = y_out2[i-1];
//				error2[i] = error2[i-1];
				}
				for(i = wlength-1; i > 0; --i){
				x_hat[i] = x_hat[i-1];
			    }

				counter++;
	}

void emif_init(void)
{
	/* DSK6713IF-A (HEG)  BusTimingSet */
	EMIF_FSET(CECTL2,TA,3);
	EMIF_FSET(CECTL2,MTYPE,2);

	EMIF_FSET(CECTL2,WRSETUP,0);
	EMIF_FSET(CECTL2,WRSTRB,3);
	EMIF_FSET(CECTL2,WRHLD,2);

	EMIF_FSET(CECTL2,RDSETUP,0);
	EMIF_FSET(CECTL2,RDSTRB,4);
	EMIF_FSET(CECTL2,RDHLD,1);
}

// Check Toggle Bit
/* Starting of DSK6713IF is checked using the toggle bit.
   When the toggle bit carries out alternation 3 times (any times),
   a return will be carried out from the function.
*/
void DSKIFCHECK(void)
{
	int i;
	for(i=0;i<3;i++){
		while((*(volatile Int32 *)DSKIF_TOGGLE & 0x01) !=0);
		while((*(volatile Int32 *)DSKIF_TOGGLE & 0x01) ==0);
	}
}

void offline (void)
{
	st = gain * uran();

	// DSP Output
	da_data[0] = (Int32)(st * (float)32768);	// white noise To loudspeaker
	da_data[1] = (Int32)(error1 * (float)32768);	// check error signal
	/* Send signal out */
	*(volatile Int32 *)DSKIF_DA0 = da_data[0];   // secondary loudspeaker
	*(volatile Int32 *)DSKIF_DA1 = da_data[1];   // check error signal
	// Trigger DAC
	*(volatile Int32 *)DSKIF_DASETFLG = 0;	/* Clear DA conversion start bit */
	*(volatile Int32 *)DSKIF_DASETFLG = 1;	/* Set DA conversion start bit */
	// DSP input (error)
	   offline_input[0] = st;
	   e1_min = (float)ad_data[1]/(float)32768;
//	   ad_data[1] = *(volatile Int32 *)DSKIF_AD1;
	// Adaptive output filtering
	   y_out1 = 0.0;
	   for( i = 0; i < seclength; i++){
	   y_out1 += offline_input[i] * s[i];
	}
	// Error
	   error1 = e1_min - y_out1;
	// Weight updating
	   for(i = 0; i < seclength; i++){
	   s[i] += beta1 * offline_input[i] * error1;
	   }
   	// Signal buffering
    for(i = seclength-1; i > 0; i--){
       offline_input[i] = offline_input[i-1];
       }
	counter++;

}
/****************************************************************************/
